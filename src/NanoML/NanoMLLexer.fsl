{
module NanoML.Compiler.Lexer
open Microsoft.FSharp.Text
open Microsoft.FSharp.Text.Lexing
open NanoML.Compiler.Parser


let lexeme = LexBuffer<_>.LexemeString


let keywords =
    [ "if", IF
      "then", THEN
      "else", ELSE
      "fun", FUN
      "int", TINT
      "float", TFLOAT
      "bool", TBOOL
      "is", IS
      "let", LET
      "true", TRUE
      "false", FALSE ]

let kwdMap = keywords |> Map.ofList

let ident id =
    match Map.tryFind id kwdMap with
    | Some v -> v | _ -> VAR id

}

let ident = ['a' - 'z' 'A' - 'Z']+
let newline = '\n' | '\r' '\n'
let whitespace = [' ' '\t']
let digit = '\Nd'
let integer = digit+
let floatp = digit+ '.' digit*  
let floate = digit+ ('.' digit* )? ('e'| 'E') ['+' '-']? digit+
let float = floatp | floate 

rule token = parse
      whitespace { token lexbuf }
    | newline { lexbuf.EndPos <- lexbuf.EndPos.NextLine; token lexbuf }
    | ident { ident (lexeme lexbuf) }
    | integer { INT(System.Int32.Parse(lexeme lexbuf)) }
    | float { FLOAT(System.Double.Parse(lexeme lexbuf)) }
    | "->" { TARROW }
    | ";;" { SEMICOLON2 }
    | '=' { EQUAL }
    | '<' { LESS }
    | ':' { COLON }
    | '(' { LPAREN }
    | ')' { RPAREN }
    | '+' { PLUS }
    | '-' { MINUS }
    | '/' { DIVIDE }
    | '*' { TIMES }
    | eof { EOF }
