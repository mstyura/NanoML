%{
open NanoML.Compiler.Ast
%}

%token TINT
%token TFLOAT
%token TBOOL
%token TARROW
%token <string> VAR
%token <int> INT
%token <float> FLOAT
%token <bool> BOOL
%token <string> STRING
%token TRUE FALSE
%token PLUS MINUS TIMES DIVIDE
%token EQUAL LESS
%token IF THEN ELSE
%token FUN IS
%token COLON
%token LPAREN RPAREN
%token LET
%token SEMICOLON2
%token END
%token IN
%token EOF

%start toplevel
%type <toplevel_decl list> toplevel

%start expr
%type <expr> expr

%nonassoc FUN IS
%nonassoc IF THEN ELSE
%nonassoc EQUAL
%nonassoc LESS

%left IN
%left PLUS MINUS
%left TIMES DIVIDE
%left COLON
%right TARROW


%%


toplevel:
      EOF { [] }
    | def EOF { [$1] }
    | def SEMICOLON2 EOF { [$1] }
    | expr EOF { [Expr $1] }
    | expr SEMICOLON2 EOF { [Expr $1] }
    | def SEMICOLON2 toplevel { $1 :: $3 }
    | expr SEMICOLON2 toplevel { (Expr $1) :: $3 }


def : LET VAR EQUAL expr { LetBinding ((Name $2), $4) }


expr:
      non_app { $1 }
    | app { $1 }
    | arithmetic { $1 }
    | cond { $1 }
    | IF expr THEN expr ELSE expr { Cond ($2, $4, $6) }
    | FUN VAR LPAREN VAR COLON ty RPAREN COLON ty IS expr END { Fun (Name $2, Name $4, $6, $9, $11) }
    | LET VAR EQUAL expr IN expr { LetIn (Name $2, $4, $6) }


app :
      app non_app { Apply ($1, $2) }
    | non_app non_app { Apply ($1, $2) }


non_app:
      VAR   { Var (Name $1) }
    | TRUE { Bool true }
    | FALSE { Bool false }
    | INT { Int $1 }
    | FLOAT { Float $1 }
    | LPAREN expr RPAREN { $2 }

arithmetic:
      MINUS INT { Int (-$2) }
    | MINUS FLOAT { Float (-$2) }
    | expr PLUS expr { Plus ($1, $3) }
    | expr MINUS expr { Minus ($1, $3) }
    | expr TIMES expr { Times($1, $3) }
    | expr DIVIDE expr { Divide ($1, $3) }

cond:
      expr EQUAL expr { Equal ($1, $3) }
    | expr LESS expr { Less ($1, $3) }

ty:
      TBOOL { TyBool }
    | TINT { TyInt }
    | TFLOAT { TyFloat }
    | ty TARROW ty { TyFun ($1, $3) }
    | LPAREN ty RPAREN { $2 }

%%
